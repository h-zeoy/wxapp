// pages/play/play.js
const audioList = require('../../data/audioList');
const innerAudioContext = wx.getBackgroundAudioManager();
Page({
  /**
   * 页面的初始数据
   */
  data: {
    playInfo: {
      id: 51,
      name: '5分钟冥想',
      img: 'https://polaris-test.oss-cn-beijing.aliyuncs.com/image/miniapp/lianxi1.png',
      audio: 'https://polaris-test.oss-cn-beijing.aliyuncs.com/course/audio/Y75dsRnW.mp3',
    },
    innerAudioContext: null,
    isPlay: true,
    currentTime: 0,
    duration: 0,
    playProgressBg: 0,
    progress: {
      bgWidth: 0,
      sliderLeft: 0,
    },
    isMove: false,
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var that = this;
    wx.createSelectorQuery().select('.play-progress-bg').boundingClientRect(function (rect) {
      that.playProgressBg = rect.width;
    }).exec();
    const playInfo = this._getPlayInfo(options);
    that.setData({
      playInfo,
      innerAudioContext
    });
    innerAudioContext.src = playInfo.audio;
    innerAudioContext.title = playInfo.name;
    innerAudioContext.play();
    innerAudioContext.onCanplay(()=>{
      innerAudioContext.duration // 初始化duration
      if (!that.duration) {
        setTimeout(function() {
          that.setData({
            duration: innerAudioContext.duration
          })
        }, 1000);
      }
    });
    innerAudioContext.onEnded(() => {
      that.setData({
        isPlay: false,
      });
      console.log('播放结束');
    });

    innerAudioContext.onPause(() => {
      that.setData({
        isPlay: false
      });
      console.log('暂停');
    });
    innerAudioContext.onPlay(() => {
      that.setData({
        isPlay: true
      });
      console.log('开始');
    });
    innerAudioContext.onTimeUpdate(() => {
      const params = {};
      params.currentTime = innerAudioContext.currentTime;  //当前播放进度
      if (!that.data.isMove) {
        params.progress = {
          bgWidth: ((innerAudioContext.currentTime / innerAudioContext.duration) * that.playProgressBg).toFixed(2),
          sliderLeft: ((innerAudioContext.currentTime / innerAudioContext.duration) * that.playProgressBg).toFixed(2),
        }
      }
      that.setData(params);
    });
    // const version = wx.getSystemInfoSync().SDKVersion;
    // console.log(version);
  },

  _getPlayInfo: function (options) {
    for (let i = 0; i < audioList.length; i++) {
      if (options.moduleId == String(audioList[i].moduleId)) {
        for (let j = 0; j < audioList[i].list.length; j++) {
          if (options.playId === String(audioList[i].list[j].id)) {
            return audioList[i].list[j];
          }
        }
      }
    }
  },

  touchStart: function (e) {
    this.start = e.touches[0].pageX;
    const that = this;
    that.data.isMove = true;
    wx.createSelectorQuery().select('.play-progress-dot').boundingClientRect(function (rect) {
      that.barWidth = rect.width;
    }).exec();
  },
  touchMove: function (e) {
    const moveX = e.touches[0].pageX - this.start;
    this.setData({
      progress: {
        bgWidth: Math.min(this.playProgressBg, Math.max(0, this.barWidth + moveX)).toFixed(2),
        sliderLeft: Math.min(this.playProgressBg, Math.max(0, this.barWidth + moveX)).toFixed(2),
      }
    });
  },
  touchEnd: function () {
    this.data.isMove = false;
    if (this.data.progress.bgWidth == this.playProgressBg) {
      innerAudioContext.seek(this.data.duration * (this.data.progress.bgWidth / this.playProgressBg) - 1);
    } else {
      innerAudioContext.seek(this.data.duration * (this.data.progress.bgWidth / this.playProgressBg));
    }
  },

  handlePlay: function () {
    const that = this;
    this.setData({
      isPlay: !that.data.isPlay
    }, function() {
      if (that.data.isPlay) {
        if (!innerAudioContext.src) {
          innerAudioContext.src = that.data.playInfo.audio;
          innerAudioContext.title = that.data.playInfo.name;
        }
        innerAudioContext.play();
      } else {
        innerAudioContext.pause()
      }
    });

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})